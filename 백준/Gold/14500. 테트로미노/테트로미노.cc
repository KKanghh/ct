#include <bits/stdc++.h>
using namespace std;
int dxdy[19][2][3] = {
	{{1, 2, 3}, {0, 0, 0}}, // 1
	{{0, 0, 0}, {1, 2, 3}}, // 2
	{{1, 2, 2}, {0, 0, 1}}, // 3
	{{1, 2, 2}, {0, 0, -1}}, // 4
	{{0, 1, 2}, {1, 0, 0}}, // 5
	{{0, 1, 2}, {1, 1, 1}}, // 6
	{{1, 0, 0}, {0, 1, 2}}, // 7
	{{0, 0, 1}, {1, 2, 2}}, // 8
	{{0, 0, -1}, {1, 2, 2}}, // 9
	{{-1, 0, 0}, {0, 1, 2}}, // 10
	{{1, 1, 2}, {0, 1, 1}}, // 11
	{{1, 1, 2}, {0, -1, -1}}, // 12
	{{0, 1, 1}, {1, 1, 2}}, // 13
	{{0, -1, -1}, {1, 1, 2}}, // 14
	{{1, 1, 2}, {0, 1, 0}}, // 15
	{{1, 1, 2}, {0, -1, 0}}, // 16
	{{0, -1, 0}, {1, 1, 2}}, // 17
	{{0, 1, 0}, {1, 1, 2}}, // 18
	{{0, 1, 1}, {1, 0, 1}} // 19
};
int N, M, mx;

int board[500][500];

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);

	cin >> N >> M;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> board[i][j];
		}
	}

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			for (int k = 0; k < 19; k++) {
				int cnt = board[i][j];
				for (int l = 0; l < 3; l++) {
					int nx = i + dxdy[k][0][l];
					int ny = j + dxdy[k][1][l];
					if (nx < 0 || nx >= N || ny < 0 || ny >= M) break;
					cnt += board[nx][ny];
				}
				mx = max(mx, cnt);

			}
		}
	}

	cout << mx;
}